@using Dignite.Abp.DynamicForms.FileExplorer
@using Dignite.FileExplorer.Files;
@using System.Text.Json;
@inherits FieldComponentBase<FileExplorerForm,FileExplorerConfiguration>

<Field Horizontal="@(!IsChild)">
    <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@IsChild">@Field.DisplayName</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
        @if (Files != null && Files.Any())
        {
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@L["FileName"]</TableHeaderCell>
                    <TableHeaderCell>@L["FileSize"]</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                    @foreach (var item in Files)
                {
                    <TableRow>
                        <TableRowCell>@item.Name</TableRowCell>
                        <TableRowCell>@FileSizeFormatter.FormatSize(item.Size)</TableRowCell>
                        <TableRowCell>
                            <Button Color="Color.Primary"><Icon Name="@IconName.FileDownload"></Icon></Button>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        }
    </FieldBody>
</Field>

@code {
    private List<FileDescriptorDto> Files = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (CustomizableObject.GetField(Field.Name, null) != null)
        {
            Files = JsonSerializer.Deserialize<List<FileDescriptorDto>>(
                CustomizableObject.GetField(Field.Name, "[]").ToString(),
                new JsonSerializerOptions()
            );
        }
    }
}