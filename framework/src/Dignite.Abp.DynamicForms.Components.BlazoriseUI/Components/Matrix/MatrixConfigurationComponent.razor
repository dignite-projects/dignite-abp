@using Dignite.Abp.DynamicForms.Localization;
@using Dignite.Abp.DynamicForms.Matrix
@using Dignite.Abp.DynamicForms.Textbox;
@using System.Collections.Immutable;
@using System.Text.Json;
@using Volo.Abp.AspNetCore.Components.Web;
@inject AbpBlazorMessageLocalizerHelper<AbpDynamicFormsResource> LH
@inject IConfigurationComponentSelector ConfigurationComponentSelector
@inject IEnumerable<IForm> AllForms;
@inherits ConfigurationComponentBase<MatrixForm,MatrixConfiguration>

<Validation>
    <Field>
        <FieldLabel>@L["FieldDisplayName"]</FieldLabel>
        <TextEdit MaxLength="CustomizeFieldInfoConsts.MaxDisplayNameLength" @bind-Text="@Field.DisplayName" />
    </Field>
</Validation>
<Validation>
    <Field>
        <FieldLabel>@L["FieldName"]</FieldLabel>
        <TextEdit Pattern="@CustomizeFieldInfoConsts.NameRegularExpression" MaxLength="CustomizeFieldInfoConsts.MaxNameLength" @bind-Text="@Field.Name">
            <FieldHelp>@L["FieldNameHelpText"]</FieldHelp>
        </TextEdit>
    </Field>
</Validation>

<Validation>
    <Field>
        <FieldLabel>@L["Description"]</FieldLabel>
        <TextEdit @bind-Text="@FormConfiguration.Description" />
    </Field>
</Validation>

<Validation Validator="@ValidateAll">
<Field>
    <Row NoGutters>
        <Column ColumnSize="ColumnSize.Is2">
            <Card>
                <CardHeader>
                        @L["MatrixBlockTypes"]
                </CardHeader>
                <CardBody>
                    <ListGroup Flush>
                        @foreach(var blockType in MatrixBlockTypes)
                        {
                            <ListGroupItem Clicked="()=>SelectBlockType(blockType)">
                                <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                                    <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@blockType.DisplayName</Heading>
                                    <Button Color="Color.Default" Size="Size.Small" Clicked="()=>OpenEditBlockTypeModal(blockType)">@L["Edit"]</Button>
                                </Div>
                                <Paragraph Margin="Margin.Is1.FromBottom">@blockType.Name</Paragraph>
                            </ListGroupItem>
                        }
                    </ListGroup>
                </CardBody>
                <CardFooter>
                    <Button Color="Color.Default" Size="Size.Small" Clicked="OpenCreateBlockTypeModal">@L["NewBlockType"]</Button>
                </CardFooter>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is2">
            @if (SelectedBlockType != null)
            {
                <Card>
                    <CardHeader>
                        @L["Fields"]
                    </CardHeader>
                    <CardBody>
                        <ListGroup Flush>
                            @foreach (var field in SelectedBlockType.FieldDefinitions)
                            {
                                <ListGroupItem Clicked="()=>SelectFieldAsync(field)">
                                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@field.DisplayName</Heading>
                                    </Div>
                                    <Paragraph Margin="Margin.Is1.FromBottom">@field.Name</Paragraph>
                                </ListGroupItem>
                            }
                        </ListGroup>
                </CardBody>
                <CardFooter>
                    <Button Color="Color.Default" Size="Size.Small" Clicked="AddFieldAsync">@L["NewField"]</Button>
                </CardFooter>
            </Card>
            }
        </Column>
        <Column ColumnSize="ColumnSize.Is8">
            @if (SelectedField != null)
            {
                <Validations @ref="@FieldValidationsRef" Model="@SelectedField" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize" Validator="@ValidationRule.None">
                        <Field>
                            <FieldLabel>@L["FieldType"]</FieldLabel>
                            <Select TValue="string" SelectedValue="@SelectedField.FormName" SelectedValueChanged="FormTypeChangedAsync">
                                @foreach (var item in AvailableForms)
                                {
                                    <SelectItem TValue="string" Value="@item.Name">@item.DisplayName</SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>

                    @if (FieldFormConfigurationComponentType is not null)
                    {
                        <DynamicComponent Type="@FieldFormConfigurationComponentType" Parameters='@FieldFormConfigurationComponentParameters' />
                    }
                </Validations>
            }
        </Column>
    </Row>
</Field>
</Validation>

<Blazorise.Modal @ref="CreateBlockTypeModal" Closing="@ClosingCreateBlockTypeModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["MatrixBlockType"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseCreateBlockTypeModalAsync" />
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@CreateBlockTypeValidationsRef" Model="@NewBlockType" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>@L["DisplayName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewBlockType.DisplayName" />
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewBlockType.Name" />
                        </Field>
                    </Validation>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="CloseCreateBlockTypeModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@CreateBlockType" />
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<Blazorise.Modal @ref="EditBlockTypeModal" Closing="@ClosingEditBlockTypeModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["MatrixBlockType"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseEditBlockTypeModalAsync" />
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@EditBlockTypeValidationsRef" Model="@EditingBlockType" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>@L["DisplayName"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingBlockType.DisplayName" />
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingBlockType.Name" />
                        </Field>
                    </Validation>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="CloseEditBlockTypeModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@UpdateBlockType" />
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
</Blazorise.Modal>


@code {
    protected List<MatrixBlockType> MatrixBlockTypes = new();
    protected ImmutableList<IForm> AvailableForms;

    protected Modal CreateBlockTypeModal;
    protected Validations CreateBlockTypeValidationsRef;
    protected MatrixBlockType NewBlockType=new();

    protected Modal EditBlockTypeModal;
    protected Validations EditBlockTypeValidationsRef;
    protected MatrixBlockType EditingBlockType = new();

    protected MatrixBlockType SelectedBlockType = null;

    protected Validations FieldValidationsRef;
    protected MatrixBlockFieldDefinition SelectedField = null;
    protected Type FieldFormConfigurationComponentType;
    protected Dictionary<string, object> FieldFormConfigurationComponentParameters = new();


    void ValidateAll(ValidatorEventArgs e)
    {
        FormConfiguration.MatrixBlockTypes = MatrixBlockTypes;
    }


    protected override Task OnInitializedAsync()
    {
        AvailableForms = AllForms.Where(p => p.FormType == Dignite.Abp.DynamicForms.FormType.Simple).ToImmutableList();
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        MatrixBlockTypes = FormConfiguration.MatrixBlockTypes;
    }

    #region create block type methods
    protected virtual Task ClosingCreateBlockTypeModal(ModalClosingEventArgs eventArgs)
    {
        // cancel close if clicked outside of modal area
        eventArgs.Cancel = eventArgs.CloseReason == CloseReason.FocusLostClosing;

        return Task.CompletedTask;
    }

    protected virtual Task CloseCreateBlockTypeModalAsync()
    {
        InvokeAsync(CreateBlockTypeModal.Hide);
        return Task.CompletedTask;
    }

    private async Task OpenCreateBlockTypeModal()
    {
        NewBlockType = new MatrixBlockType();

        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await CreateBlockTypeModal.Show();
        });
    }

    protected virtual async Task CreateBlockType()
    {
        MatrixBlockTypes.Add(NewBlockType);
        SelectedBlockType = null;
        SelectedField = null;
        FormConfiguration.MatrixBlockTypes = MatrixBlockTypes;
        await CreateBlockTypeModal.Hide();
    }
    #endregion


    #region update block type methods
    protected virtual Task ClosingEditBlockTypeModal(ModalClosingEventArgs eventArgs)
    {
        // cancel close if clicked outside of modal area
        eventArgs.Cancel = eventArgs.CloseReason == CloseReason.FocusLostClosing;

        return Task.CompletedTask;
    }

    protected virtual Task CloseEditBlockTypeModalAsync()
    {
        InvokeAsync(EditBlockTypeModal.Hide);
        return Task.CompletedTask;
    }

    private async Task OpenEditBlockTypeModal(MatrixBlockType blockType)
    {
        EditingBlockType = blockType;

        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await EditBlockTypeModal.Show();
        });
    }

    protected virtual async Task UpdateBlockType()
    {
        FormConfiguration.MatrixBlockTypes = MatrixBlockTypes;
        await EditBlockTypeModal.Hide();
    }
    #endregion

    protected virtual void SelectBlockType(MatrixBlockType blockType)
    {
        SelectedBlockType = blockType;
        SelectedField = null;
    }
    protected virtual async Task SelectFieldAsync(MatrixBlockFieldDefinition field)
    {
        if (SelectedField == null || await FieldValidationsRef.ValidateAll())
        {
            SelectedField = field;
            await SetFieldFormConfigurationComponentAsync();
        }
    }

    protected virtual async Task AddFieldAsync()
    {
        SelectedField = new MatrixBlockFieldDefinition()
        { 
            FormName = TextboxForm.TextboxFormName
        };
        SelectedBlockType.FieldDefinitions.Add(SelectedField);
        await SetFieldFormConfigurationComponentAsync();
    }

    private async Task FormTypeChangedAsync(string formName)
    {
        SelectedField.FormName = formName;
        await SetFieldFormConfigurationComponentAsync();
    }

    private async Task SetFieldFormConfigurationComponentAsync()
    {
        var configurationComponent = ConfigurationComponentSelector.Get(SelectedField.FormName);
        FieldFormConfigurationComponentType = configurationComponent.GetType();
        FieldFormConfigurationComponentParameters = new Dictionary<string, object>
            {
                { "Field", SelectedField }
            };

        await Task.CompletedTask;
    }
}