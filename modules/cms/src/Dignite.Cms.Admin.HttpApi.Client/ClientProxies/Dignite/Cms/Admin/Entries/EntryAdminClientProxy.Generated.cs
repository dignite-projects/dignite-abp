// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Dignite.Cms.Admin.Entries;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Dignite.Cms.Admin.Entries;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IEntryAdminAppService), typeof(EntryAdminClientProxy))]
public partial class EntryAdminClientProxy : ClientProxyBase<IEntryAdminAppService>, IEntryAdminAppService
{
    public virtual async Task<EntryDto> CreateAsync(CreateEntryInput input)
    {
        return await RequestAsync<EntryDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateEntryInput), input }
        });
    }

    public virtual async Task<EntryDto> UpdateAsync(Guid id, UpdateEntryInput input)
    {
        return await RequestAsync<EntryDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateEntryInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<EntryDto>> GetListAsync(GetEntriesInput input)
    {
        return await RequestAsync<PagedResultDto<EntryDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEntriesInput), input }
        });
    }

    public virtual async Task<EntryDto> GetAsync(Guid id)
    {
        return await RequestAsync<EntryDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<EntryDto>> GetAllVersionsAsync(Guid id)
    {
        return await RequestAsync<ListResultDto<EntryDto>>(nameof(GetAllVersionsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task ActivateAsync(Guid id)
    {
        await RequestAsync(nameof(ActivateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task MoveAsync(Guid id, MoveEntryInput input)
    {
        await RequestAsync(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(MoveEntryInput), input }
        });
    }

    public virtual async Task<bool> SlugExistsAsync(SlugExistsInput input)
    {
        return await RequestAsync<bool>(nameof(SlugExistsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SlugExistsInput), input }
        });
    }

    public virtual async Task<bool> CultureExistWithSingleSectionAsync(CultureExistWithSingleSectionInput input)
    {
        return await RequestAsync<bool>(nameof(CultureExistWithSingleSectionAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CultureExistWithSingleSectionInput), input }
        });
    }

    public virtual async Task<ListResultDto<EntryDto>> GetListByIdsAsync(Guid sectionId, IEnumerable<Guid> ids)
    {
        return await RequestAsync<ListResultDto<EntryDto>>(nameof(GetListByIdsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), sectionId },
            { typeof(IEnumerable<Guid>), ids }
        });
    }
}
