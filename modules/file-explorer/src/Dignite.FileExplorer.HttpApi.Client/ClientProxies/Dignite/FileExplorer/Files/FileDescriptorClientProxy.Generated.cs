// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Dignite.FileExplorer.Files;
using JetBrains.Annotations;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Dignite.FileExplorer.Files;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IFileDescriptorAppService), typeof(FileDescriptorClientProxy))]
public partial class FileDescriptorClientProxy : ClientProxyBase<IFileDescriptorAppService>, IFileDescriptorAppService
{
    public virtual async Task<FileDescriptorDto> CreateAsync(CreateFileInput input)
    {
        return await RequestAsync<FileDescriptorDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateFileInput), input }
        });
    }

    public virtual async Task<FileDescriptorDto> UpdateAsync(Guid id, UpdateFileInput input)
    {
        return await RequestAsync<FileDescriptorDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateFileInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<FileDescriptorDto> GetAsync(Guid id)
    {
        return await RequestAsync<FileDescriptorDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<FileDescriptorDto>> GetListAsync(GetFilesInput input)
    {
        return await RequestAsync<PagedResultDto<FileDescriptorDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetFilesInput), input }
        });
    }

    public virtual async Task<FileContainerConfigurationDto> GetFileContainerConfigurationAsync(string containerName)
    {
        return await RequestAsync<FileContainerConfigurationDto>(nameof(GetFileContainerConfigurationAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), containerName }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetStreamAsync(string containerName, string blobName, ImageResizeInput imageResize)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetStreamAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), containerName },
            { typeof(string), blobName },
            { typeof(string), imageResize }
        });
    }

    public virtual async Task<ListResultDto<FileDescriptorDto>> GetListByEntityIdAsync(string containerName, string entityId)
    {
        return await RequestAsync<ListResultDto<FileDescriptorDto>>(nameof(GetListByEntityIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), containerName },
            { typeof(string), entityId }
        });
    }

    public virtual async Task DeleteByEntityIdAsync(string containerName, string entityId)
    {
        await RequestAsync(nameof(DeleteByEntityIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), containerName },
            { typeof(string), entityId }
        });
    }
}
